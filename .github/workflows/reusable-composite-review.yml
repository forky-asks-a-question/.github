name: Review PR

on:
  workflow_call:
    inputs:
      action-name:
        description: The name of the action
        required: false
        type: string
        default: ${{ github.repository }}
      default-branch:
        description: Default branch of which contains the tag
        required: false
        type: string
        default: main
      readme-location:
        description: The location of the readme file
        required: false
        type: string
        default: './README.md'
      files-with-code:
        description: The files that contain code for the action
        required: false
        type: string
        default: 'action.yml'
      folders-with-code:
        description: The folders that contain code for the action
        required: false
        type: string
        default: 'src'
    secrets:
      PIPELINE_BOT_PAT:
        description: 'A PAT with permission to commit changes on branch PRs.  This does not apply if the PR is from a fork.'
        required: false

jobs:
  setup-build:
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.version.outputs.NEXT_VERSION }}
      HAS_SOURCE_CODE_CHANGES: ${{ steps.source-code.outputs.HAS_CHANGES }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.default-branch }}
          fetch-depth: 0

      - name: Get the next version for the repo
        id: version
        uses: im-open/git-version-lite@v2

      - name: The next action version will be - ${{ steps.version.outputs.NEXT_VERSION }}
        run: echo "The next action version will be - ${{ steps.version.outputs.NEXT_VERSION }}"

      - name: Check for code changes to the action source code
        id: source-code
        uses: im-open/did-custom-action-code-change@v1
        with:
          files-with-code: ${{ inputs.files-with-code}} # Default is 'action.yml,package.json,package-lock.json'
          folders-with-code: ${{ inputs.folders-with-code }} # Default is 'src,dist'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: The PR has source code changes - ${{ steps.source-code.outputs.HAS_CHANGES }}
        run: echo "The PR has source code changes (not just things like readmes or builds) - ${{ steps.source-code.outputs.HAS_CHANGES}}"

  review-pr:
    runs-on: ubuntu-latest
    needs: [setup-build]

    env:
      NEXT_VERSION: ${{ needs.setup-build.outputs.NEXT_VERSION }}
      HAS_CODE_CHANGES: ${{ needs.setup-build.outputs.HAS_SOURCE_CODE_CHANGES }}
      IS_FORK: ${{ github.event.pull_request.head.repo.fork }}
      PR_SOURCE: ${{ github.event.pull_request.head.repo.fork == true && 'fork' || 'branch' }}
      NEEDS_COMMIT: false

    steps:
      - name: Action Source Code Changed - ${{ env.HAS_CODE_CHANGES }}
        run: |
          if [ "${{env.HAS_CODE_CHANGES}}" == "true" ]; then
            echo "The PR changes the action's source code.  Proceed with subsequent steps."
          else
            echo "The PR does not change the action's source code.  Skipping subsequent steps."
          fi

      # The remaining steps in this build will use the env.HAS_CODE_CHANGES condition.  Setting it on each
      # step rather than the job will ensure this job always runs and that we can use it for status checks.

      - name: PR Source - ${{ env.PR_SOURCE }}
        if: env.HAS_CODE_CHANGES == 'true'
        run: echo "The PR can come from a branch or a fork.  This PR is from a ${{ env.PR_SOURCE }}."

      - name: Checkout branch with pipeline-bot creds
        if: env.HAS_CODE_CHANGES == 'true' && env.IS_FORK == 'false'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.PIPELINE_BOT_PAT }}
          fetch-depth: 0

      - name: Checkout fork with default gh-actions creds
        if: env.HAS_CODE_CHANGES == 'true' && env.IS_FORK == 'true'
        uses: actions/checkout@v3

      - name: Update readme with next version - ${{ env.NEXT_VERSION }}
        if: env.HAS_CODE_CHANGES == 'true'
        uses: im-open/update-action-version-in-file@v1
        with:
          file-to-update: ${{ inputs.readme-location }} # Default: './README.md'
          action-name: ${{ inputs.action-name }} # Default: '${{ github.repository }}'
          updated-version: ${{ env.NEXT_VERSION }}

      - name: Check for unstaged readme changes
        if: env.HAS_CODE_CHANGES == 'true'
        run: |
          if [[ "$(git status --porcelain)" != "" ]]; then
            echo "There are readme changes to commit"
            echo "NEEDS_COMMIT=true" >> "$GITHUB_ENV"
          else
            echo "There were no readme changes to commit"
            echo "NEEDS_COMMIT=false" >> "$GITHUB_ENV"
          fi

      # --------------------------------------------
      # Steps for PRs that are from Repo Branches
      # --------------------------------------------
      - name: If there are outstanding changes on the branch - Commit unstaged changes
        if: env.HAS_CODE_CHANGES == 'true' && env.IS_FORK == 'false' &&  env.NEEDS_COMMIT == 'true'
        run: |
          git config user.name im-pipeline-bot
          git config user.email im-pipeline-bot@wtwco.com

          git add .
          git commit -m "Update readme with latest tag."
          git push origin HEAD:${{ github.head_ref }}

      # -----------------------------------------
      # Steps for PRs that are from Forked Repos
      # -----------------------------------------
      - name: If there are outstanding changes on the fork - Construct failing workflow summary
        if: env.HAS_CODE_CHANGES == 'true' && env.IS_FORK == 'true' &&  env.NEEDS_COMMIT == 'true'
        id: summary
        uses: actions/github-script@v6
        with:
          script: |
            const summary = `This PR needs an update before it can be merged.  Please:
            - Update the version for all instances of this action in the ${{ inputs.readme-location }} file.  It should be changed to: 
              \`uses: ${{ inputs.action-name }}@${{ env.NEXT_VERSION }}\``;
            core.setOutput('summary', summary);

      - name: If there are outstanding changes on the fork - Fail the workflow
        if: env.HAS_CODE_CHANGES == 'true' && env.IS_FORK == 'true' && env.NEEDS_COMMIT == 'true'
        run: |
          echo '${{ steps.summary.outputs.summary }}' >> $GITHUB_STEP_SUMMARY
          echo '::error::${{ steps.summary.outputs.summary }}'
          exit 1
